{"version":3,"sources":["styles/Mixin.tsx","styles/index.tsx","components/Header.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["flexCenterRow","css","flexCenterColumn","theme","color","text","primaryText","secondaryText","divider","primary","darkPrimary","lightPrimary","accentColor","disabled","idle","pending","running","success","error","zIndex","logo","fab","modal","fontSize","header","content","font","title","subtitle","code","Global","createGlobalStyle","p","Separator","styled","div","width","height","Text","span","Header","Footer","footer","year","Date","getFullYear","App","showTime","href","repository","target","rel","version","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","parseFormatList","pathname","argv","decodeURI","substr","inputTime","isNaN","unixTime","DateTime","fromMillis","parseFloat","invalidReason","parsedTimeList","map","f","fromFormat","filter","dt","length","local","parseArgv","outputTime","toFormat","document","history","replaceState","toMillis","toString","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fd6d02fb.chunk.js","sourcesContent":["import { css } from 'styled-components/macro';\nexport const flexCenterRow = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const flexCenterColumn = css`\n  ${flexCenterRow}\n  flex-direction: column;\n`;\n","import styled, { createGlobalStyle } from 'styled-components/macro'\nimport { DefaultTheme } from 'styled-components'\nimport { flexCenterColumn } from './Mixin';\n\nexport const theme: DefaultTheme = {\n  color: {\n    text: '#FFFFFF',\n    primaryText: '#212121',\n    secondaryText: '#757575',\n\n    divider: '#BDBDBD',\n\n    primary: '#200f21',\n    darkPrimary: '#382039',\n    lightPrimary: '#5a3d5c',\n    accentColor: '#f638dc',\n    \n    disabled: '#aaa',\n\n    idle: '#f638dc',\n    pending: '#E7AB48',\n    running: '#3772FF',\n    success: '#16b50c',\n    error: '#b00020'\n  },\n\n  zIndex: {\n    logo: 1000,\n    fab: 1200,\n    modal: 1500\n  },\n\n  fontSize: {\n    header: 3,\n  },\n\n  content: {\n    \n  },\n\n  font: {\n    title: '',\n    subtitle: '',\n    text:\n      \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen','Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',sans-serif\",\n    code: \"'Source Code Pro', monospace\"\n  }\n}\n\nexport const Global = createGlobalStyle`\n  html,\n  body,\n  #root {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    width: 100%;\n    overflow: hidden;\n    user-select: none;\n    font-family: ${p => p.theme.font.text};\n\n    ${flexCenterColumn};\n  }\n\n  a {\n    color: ${p => p.theme.color.primary};\n    text-decoration: none;\n  }\n\n  a:visited {\n    color: ${p => p.theme.color.accentColor};\n  }\n\n  a:hover,\n  a:visited:hover {\n    opacity: 0.7;\n  }\n\n  ::-webkit-scrollbar {\n    width: 9px;\n    height: 9px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: ${p => p.theme.color.primary};\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: ${p => p.theme.color.text};\n  }\n`\n\nexport const Separator = styled.div<SeparatorProps>`\n  width: ${p => p.width || 0}em;\n  height: ${p => p.height || 0}em;\n`\n\nexport const Text = styled.span<ColorProps & { fontSize?: string }>`\n  color: ${p => (p.color ? p.theme.color[p.color] : p.theme.color.primary)};\n  font-size: ${p => p.fontSize || '1em'};\n`\n","import styled from 'styled-components/macro'\nimport { flexCenterColumn } from '../styles/Mixin'\n\nexport const Header = styled.header`\n  ${flexCenterColumn}\n  height: 100vh;\n  width: 100vw;\n  background: ${p => p.theme.color.primary};\n  color: ${p => p.theme.color.text};\n\n  font-size: ${p => p.theme.fontSize.header}em;\n  font-weight: 100;\n`\n","import styled from 'styled-components/macro'\nimport { flexCenterRow } from '../styles/Mixin'\n\nexport const Footer = styled.footer`\n  ${flexCenterRow}\n  height: 3em;\n  width: 100vw;\n  background: ${p => p.theme.color.darkPrimary};\n`\n","import React from 'react'\n\nimport { hot } from 'react-hot-loader/root'\nimport { ThemeProvider } from 'styled-components/macro'\nimport { theme, Global, Separator } from './styles'\n\nimport { Header } from 'components/Header'\nimport { Footer } from 'components/Footer'\n\nimport { Text } from 'styles'\n\nimport { repository, version } from '../package.json'\n\nconst date = new Date()\nconst year = date.getFullYear()\n\nconst App: React.FC<{ showTime: string }> = ({ showTime }) => (\n  <ThemeProvider theme={theme}>\n    <>\n      <Global />\n      <Header>{showTime}</Header>\n      <Footer>\n        <Text color=\"text\">Â© {year} L</Text> <Separator width={0.5} />\n        <a\n          href={`https://github.com/${repository}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://github.com/{repository}@{version}\n        </a>\n      </Footer>\n    </>\n  </ThemeProvider>\n)\n\nexport default hot(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { DateTime } from 'luxon'\n\nconst parseFormatList = ['ha', 'hha', 'h:mm', 'h:mma', 'hh:mma']\n\nconst parseArgv = argv => {\n  if (!isNaN(argv)) {\n    const unixTime = DateTime.fromMillis(parseFloat(argv))\n\n    if (!unixTime.invalidReason) {\n      return unixTime\n    }\n    console.log('failed unixtest', unixTime)\n  }\n\n  const parsedTimeList = parseFormatList\n    .map(f => DateTime.fromFormat(argv, f))\n    .filter(dt => !dt.invalidReason)\n\n  if (parsedTimeList.length > 0) {\n    return parsedTimeList[0]\n  }\n\n  console.log('failed isotest')\n\n  return DateTime.local()\n}\n\nconst { pathname } = window.location\n\nconsole.log({ pathname })\n\nconst decodedPathname = decodeURI(pathname)\n\nconst argv = decodedPathname.substr(1)\n\nconsole.log({ argv })\n\nconst inputTime = parseArgv(argv)\n\nconsole.log({ inputTime })\n\nconsole.log(parseFloat(argv))\n\nconst outputTime = inputTime.toFormat('hh:mma Z')\n\nwindow.document.title = outputTime\n\n// if (inputTime.toMillis() !== parseFloat(argv)) {\n  // window.location.pathname = '/' + inputTime.toMillis().toString()\n// }\nwindow.history.replaceState(null, null, '/' + inputTime.toMillis().toString())\n\nReactDOM.render(<App showTime={outputTime} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}